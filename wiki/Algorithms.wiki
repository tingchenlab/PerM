#labels Featured
PerM uses special periodic spaced seeds to balance the sensitivity and speed. 
The following table shows the seed used for 50 bp SOLiD read
||*Seed Name*||*Pattern*||Weight (Before extend)||Full Sensitive to||
||F,,2,,||{{{(111*1**)(111*1**)(111*1**)(111*1**)(111*1**)(111*1**)1}}}||25||2 mis|| 
||S,,1,1,,||{{{(1111**1***)(1111**1***)(1111**1***)(1111*1***)}}}||20||1 mis+1 SNP||
||F,,3,,||{{{(111*1**1***)(111*1**1***)(111*1**1***)(111*1*)}}}||19||3 mis||
||S,,2,2,,||{{{(1111**1****)(1111**1****)(1111**1****)(1111**1)}}}||20||2 SNPs||
||F,,4,,||{{{(11***1****)(11***1****)(11***1****)(11***1****)1}}}||13||4 mis||

== Compared to Seed-Based Methods ==
Many programs, including Eland, MAQ, RMAP, ZOOM, SOCS, Crona Lite all use similar seed method. The reason that PerM could be faster is because its higher seed weight. Most of the program have seed weight 13 or 14, limited by the memory for hashing. To break the limit, PerM use both hash and binary search on the "periodic spaced seed array". The high seed weight is necessary for large genome with highly repetitive regions, which is typically the bottleneck of genome scale mapping. 

== Compared to BWT-Based Methods ==
Bowtie and other other programs, used Burrows-Wheeler Transform to achieve a super memory efficient and fast reads mapping, especially for high quality, short reads, with no full sensitivity guaranteed. However, compared to the BWT based methods, PerM still has the following advantages. 

(0) PerM can build index in a shorter time, although with much larger memory usage. Moreover, PerM can take advantage of multiple CPUs (potentially in GPU) to build the index in parallel. This feature is helpful under modern multi-cores computers, especially for the one-time mapping task.

(1) PerM is designed for SOLiD reads. Although one can use 'ACGT' to present colors signal and use Bowtie to mapped the so-called "double encoded" SOLiD reads, this will lose the first base information. Ex: it will map the read "AAAAA...A" to a reference with "CCCC...CCC", because their color signal are all '0'(Blue).

(2) PerM is fast even if most of the reads are not mapped. This may be the case for many poor quality SOLiD data. While Bowtie may fruitlessly exhaust its back tracking limit, PerM has a fixed number of shifts and expected random hit, which is not effected by those un-mapped reads.

(3) PerM can be full sensitive to four mismatches, with its F4 seed. With its F3 seed, PerM has high partial sensitivity for four (85%) and five (65%) substitutions. Although Bowtie can ignore the mismatches in the tail region, the maximum number of mismatches allowed in the "cared region" is limited to three. This may not enough for SOLiD reads, especially when SOLiD reads are getting longer.

(4) PerM's mapping speed increases with the read length; Bowtie's mapping speed decreases with read length. This is because that PerM has a much more higher weight in long reads; in contrast to Bowtie has a larger backtracking search space for long reads. For read length is long enough to provide sufficient weight, PerM is faster than Bowtie. 

(5) Bowtie uses a ”quality-aware” backtracking algorithm, favoring mismatches on low quality positions and increasing the probability that alignments which suggest true SNP loci will be ignored. By contrast, PerM used a special seed full sensitive to one base and one color, finding all trusty SNP-supporting alignments with high efficiency. 

[http://code.google.com/p/perm/wiki/Usage Back to usage]